Java is programming langauge with below major features
- platform independent: write code once and run anywhere , portable
	meaning u write code in one sydtem compile and it can run on any system of any o.s or hardware
- object oriented: can be used to model real life scenarios easily, easy to think
- concurrent
- fast
- general purpose : meaning same language can be used in wide variety of business domains
- secure and simple to use

criterias in java designing
- syntax was made similar to C and C++ as lot of dev were familiar to that in 90s when java was built
- has to be simpler than C and C++ hence Few features of C and C++ were cut out
   hence memory management unlike C (pointer , malloc , calloc) were out of dev hands
   java has automatic memory management using G.C
- java added inner libraries for general purpose of dev , C nad C++ do not have extensive inner libraries    
  like Collections, Date, Utils etc
  
- Sun microsystem built java to create green project
  which was like remote commanding TV and VCR player, software was installed inside TV,VCR and this remote
  hence java is platform indepedent and memory used should be less
  analysis of green team was that in future lot of embedded systems/light weight systems will pass programs over internet/network
  devices will be heterogenous meaning different o.s managed

  Goals for the same
  a. should consume less memory as software is embedded in remote and similar devices : hence java has automatic memory management using auto G.C
  b. safe and secure
  c. platform indepedent
  d. multi threaded  : while download is happening current show can be seen, multi tasking
  
- as per green project in future lot of heterogenorus(difrerent o.s) systems might communicate
  and program created by one device should run on another device with different o.s and hence it should be platform independent and secure and auto memory managed
  the project created by sun failed but it got used in www extensively
  
- computer CPU understand only combinations of 0s and 1s as instruction but it is very tough to write big code using this
   hence high level langauge came like hava , C , C++ 
  compiler is a complex program which converts high level programming soruce code to another form
  C compiler convert high level code(easy for human readability) and convert to machine code (specific to O.S) and hence is platform dependent
  Java compiler converts source code high level language into bytecode  which is making it platform independent
- Assembly languages are low level language whihc is easier than native binaries but still not easy for humans
  assembler is used to convert asemmble language source code to  binaries for machine language
  
- C compiler compiles .c code into o.s specific binary file like .exe for windows .out for linux and so on and hence it is platform dependent
 reasons of platform dependency
 a. different output binary files based on o.s , like windows have .exe , linux have .sh etc
 b. different commands based on O.Sun
 c. different processor might have different instruction set (native code instruction set can be different for different processor)
 
- interpreter is a complex program that takes high level source code as input and execute it ,no need of compilation
  this is good for platform independence but bad in terms of performance, eg is Javascript

- extra features of compiler by default
 a. check for programming rules like syntax and semantics making it fail fast
 b. can do code optiization so that performance can be better while execution

- java achieves platform independence just like interpreter but performance is not compsomised
  a compiler ensures code optimization , performance optimization unlike interpreter but lacks platofrom independence
  an interpreter ensures platform independence but lacks performance optimization
  java uses compilation for fail fast of code, performance code optimization and interpreter for platform independence

-  source code (high level) -> java compiler -> java bytecode(highly performance optimized and rule checked) -> JVM (interpreter) -> platform independence execution

- JVM is the interpreter that needs bytecode to run , any programming language can be compiled to java bytecode can be executed using jvm for platform indepdence and fast execution 
 and jit compiltation and other  benefits of JVM
 
- JVM responsilbities:
  a. Bytecode loading and interpretation
  b. security
  c. JIT compilation
  d. Garbage collection
- JIT compiler is called compiler as bytecode is compiled into native language and put in cache and form now on processor runs the native machine code directly
  no involvement of interpreter for cached code compiled

- Object oriented programming languages helps in visualizing and modeling real life scenarios easily and naturally

- java is statically typed language means once variable is defined its data type can not be changed, javascript allows same variable to hold different data(dynamically typed language)

  statically typed language advantage is we can fail fast means coding error can be chekced at compile time
- we can not reinitialize variable at class level, can do in method/static/init blocks etc  

- class level fields get default value for static as well as instance variable but not for method local variable

- char is a primitive data type holding single char value in a variable, 
  it is 16 bit unisgned integer : meaning it will be positive only
  each char has a unicode whihc will be int and in postive and is 16 bit
  range : 0 - 2 ^ 16  -1
- meaning char is nothing but 16 bit int and is always positive , 0 - 2 ^ 16  -1  
- in char variable we can store int, but only in range 0 - 65535 : range : 0 - 2 ^ 16  -1
	eventually it will show its aci charachter if printed

- so in summary 3 ways to initialize char
 char c = '1';
 char a = '/u123'; //unicode
  char c = 12; unicode unsigned 16 bit int value 
  
- we can define multiple variable at once but only of same data type and value also must be initialized

- method return type and method name in signature should always be close, no keyword can be used in middle of these	

- method overloading is also known as static polymorphism meaning which method is invoked is deduced at compile time and not runtime
  save(short s)  and save(int s) are methods
  we call save(23) literal is always int hence it calls int version
  we all save(23b) byte do not exist so it checks closes upper bound meaning short
  
- in method overloading method name is same and parameters are different : meaning data tyoe change, variable more or less
   even different order of methods means method overloading
  also return type change and other things same means compiler error   
  
- java 5 onwards we have variable argument in method
  name is vararg becaue atually in method parameters are fixed only in the form of array but it gives infinite overloaded methods
  only invocation side of method can send 0-n number of argument of same type
  they can either pass array directly or pass 0-n value seperate by comma in argument list and internally compiler converts to array
- var arg can only be the last parameter of method and there can be only one vararg parameter in method     

- vararg is just used for easier and simpler method invocation
  anyway oarameter size is fixed and data type is array why not just pass array
  just like caller invokcation would be simpler no need to pass null or empty array nor need a null check in called method
  
- constructors are used for 2 things
  a. creating objects from template of the class
  b. initializing instnce variable to define initial sate of object      
  
- rules of constructors
  a. if we do not define any constructor compiler creates a no arg constructor with a super() no arg constructor call
  b. if we define any constructor be it no arg or with arg, compiler wont add no arg default constructor  
  c. constructor can not return any value , however void return is possible but not good , instead we should throw runtimeexception in bad input case
  d. just like methods constructor are overloaded , good for code de duplication and easier acess to client
  e. constructor can call instance as well as static methods, access instance or static variable
  f. first line of constructor is either implicit call to super or manual super or this valid call to constructor
     can not have variable defined and then calling this or super
  g. can not call self constructor using this
  h. can not have recursive cyclic calls of constructor of overloaded type  
  
- constructor overloading is same like method overloading , exact argument must change or else it wont compile
  it is good for flexibilty to the client and also good for code de deduplication
    
- pre increment means before this statement the value will be updated
  but in post increment the value will get updated after this statement execution
  int k=2;
  int m = k++; // syso will give m = 2 , and k = 3; 
  int k=2;
  int m = ++k; // syso will give m = 3 , and k = 3;

- conditional opertions take one or more operands and return true based on condition
  eg : >,<,>=,<=,==,!= apart from last 4 all are applicable to all primitives
  > like ones are not applicable to boolean or objects
- logical operations take one or more boolean operands and return boolean value
   in logical operations like && , || and ! if operands is non boolean then compilation error occurs
   
- operator precedence from highest to lowest
  negation > arithematic > conditional > logical
  meaning && and || have lowest precedence  
  
- bitwise operators
 as the name suggest will involve manipulation in the bits of the oeprands
 types of operands , int (or auto trasferable type like byte,short, char and int) and boolean
 typically used in embedded systems where there is huge resource crunch and memory crunch and have huge perforamnce reasons in very less memory 
 & : convert the bits of both int or auto trasferable data to its binary representation
    then for each bit if both elements are 1 result is 1 , then transform back the bits to normal int
 ! : convert the bits of both int or auto trasferable data to its binary representation
    then for each bit if one or both elements are 1 result is 1 , then transform back the bits to normal int	
 ^ : convert the bits of both int or auto trasferable data to its binary representation
    then for each bit if exact one digit is 1 then result is 1 , then transform back the bits to normal int	
	
- switch case can be replacement of if else blocks
  not always , can be used when one literal or variable can be checked with specific set of values
- rules of switch case
  a. switch expression can be literal or variable
  b. different cases have break as optional: whihc breaks the whole switch case
  c. if one case label is matched and no break exist all subsequent below ones are executed
  d. default can be last or anywhere(so break rule applied according just like normal label)
  e. switch case can be applied for int (or int trasferable like char byte short) , Strings(since jdk 7) and enum  
 case label restrictions
 a. value of case label should be within the range of switch expression data type
 b. value should be contained at compile time meaning should be a constant
 c. null in case of Integer will give null pointer exception
 d. all label values should be unique 
 
- switch is preferred for an intent to use and forcefully use only one variable and lesser complex logics
 switch when applicable and compilable is always faster than if blocks as labels are constants and can be optimized during compilation 
 hence witch case is better performant as compiler can do optimization due to label static compile type data and wiring
 
-=-=-=switch case revision-=-=-=-=-
- can be used to replace if else complex blocks but only in specific scenarios
  a. when there is only one variable invovled and of specific data tyoe like int(or char byte short or Wrapper of same), enum or Strings
  b. There is equality check only with values and not >= or other complex && || based conditions
  c. value to check must be final or static at compiletime
  
  
  
- in ternary operator first operand is always boolean
  second and third operand has to have a value, meaning a method with void return wont work
  and complier wont be happy until we forcefully assign whole ternary operator to a value  
  
- java API is collection of prebuilt classes well tested and designed by experts
  it saves our time in writing code from scratch and also is well designed and maintainable
  also it is bug free and since millions of dev uses it , it adds code readability and maintainablity

- classes in java are organized into packages based on functionaliies, packages are nothing but directory structure
  it gives absolute name + path to a class
- Why pacakage
  a. instead of single package it divides organizes based on functioanlity and classes can be filtered based on that
  b. class name resolution : java.util.Date != java.sql.Date 
  c. security : classes inside package may be accesible but if we want only few classes to expose to other dev we can use packages  
  
- importing packages/classes have no issues in bytecode
  we might import pacakge and may never be using them , it wont add anything on the bytecode and .class performance
  compiler automatically adds fully qualified name on respective methods
  so importing packages even not in use have no side effects, no increase in .class bytecode, no performance impact
  these import are pnly benefitted for code readability and maintainablity as compiler adds them in bytecode
= java.lang package need not to be imported like String and Integer  

- string literal is internized automatically but new String("a") will need to be forced to internized
  String s1 ="abc"; , String s2 = "a"+"b"+"c"; syso(s1==s2) return true 
   concat literal will look for internization but noe like below
   String x  = "bc";
     String s1 ="abc"; , String s2 = "a"+x; syso(s1==s2) return false as compiler do not know ab out actual value
	 but final   String x  = "bc"; with same data return true as it is compile time constant
	 
- String s = "hello "+ " world"+ 123 : hello world123
  String s = "hello "+ " world"+ 123 + 100 : hello world123100
  String s = 123+100+"hello "+ " world"+ 123 : 223hello world123  
  
- information hinding using private field and setter getter have below benefits 
  a. using setter method we can validate the input and worng values can be ignored
  b. using getter we can add security implementation like if client can actually view the field
  c. in future if we want to change the innter field implementation we can just add code on setter and getter and contract of methods remains same 
    hence client wont be affected,   

- static init block can help initializing static variable where multiple line of code is needed
  eg setting basic data in a d.s like hashmap or Set (in jdk 9 we have immutable list static factory methods but not in jdk8)
 or creating a static variable for connection : will need multiple line for this and multiple if conditions hence not possible to add on class level withiut this block  
 
 - init blocks can be used for initializing instance variable
   why not put in constructors
   simple for each overloaded constructor call after super constructor call init blocks are called from top to bottom
   so that common code need not to be kept in all constructor: could have been done using method call in constructor but thats not good approach
   init block comon code auto call by compiler is better
   
-=-=-=repeat of init blocks-=-=-=-=-
//static block helps in initializing static fields of a class
// why: we can not add multiple line of code on class level, so to have some logic to initialize static fields we need static block//static block helps in initializing static fields of a class
// why: we can not add multiple line of code on class level, so to have some logic to initialize static fields we need static block   

	//steps : first super constructor completes -> init variable from top to down and then constructor code
	//hence any common code can be kept here at one go and all constructor will get this excecuted: no duplicate code in constructor	
	remember constructor can call method and common code can be kept there but that will not be good designed
	as init block gets called by compiler and also method was supposed to be used by other classes
	
	
- wrapper class are objects that hold primitive data type within and hence the name box or wrapper class
- valueof is the best static factory way to create object and it is equivalent to literal assignment
 i mean valueof static method and literal assignment to Wrapper class have cache and memory sharing as well
 but constructor do not do this , they keep on creating new objects even though they might exist on cache
	
	
- just like string class integer is also immutable and data sharing happens but within range of min and max value
Integer one = 127;
	Integer waah = 100 + 27;
		System.out.println(waah == one);	this also return s true as literal value already consider cache
		
		
- remember access modifier capability is same for method call from another class as well as inheritance
  apart from protected modifier all other behave same when one class creates object of another class and invoke member(method or variable)
    and another class extends and try to inherit that member
- child inherits both variable and methods but only methods can be overriden, we can update variable but that will be like new variable in itself	