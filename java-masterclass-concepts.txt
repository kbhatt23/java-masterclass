- keywords are oob words/commands that have meaning in java/any other programming language
- They explain things to java compilers as to what should be done in code, combination of such keywords and identifiers become code
- amazon have created free version of java 8 and above called correto as java 8 and above are not free for commercial usage
- access modifer -> how external classes/code can access our class/method/resource(variables)
- class can have only public or default access modifier, can not be private or protected
- keywords and identifiers in java is case sensitive
- While running using the main method String... vararg or String[] both works , but apart from this no other combinations works:
	public static void main(String... args)   or public static void main(String[] args) 
- variable are defined with a name and data type, the vlaue will be kpt in RAM meory based on data type
	-> the variable can be used to use the value without thinkning how data i saved in memory

- String s= messi creates one object in string constant pool usable for other variables, 
- String s= new String("messi") creates one object in constant pool and another object that points to this constant pool

- Wrapper classes are object kind behaviour of prinitive data types -> mostly used in generics and collections
- Autmoatic boxing and unbxoing happens
- Down side are below:
	a. if we convert int ot INteger aumatic boxing happens , but it consumes memory
	b. It is ummutable so if we modify its value a enw object is created and assinged to variabl.
	c. we can do ++ --  operator but for that it unwraps the Integer object ot prmitive modidfy the primitive then box(creat enew object) to Integer object
- If we store more than max or lesser than min vlaue of int it gives compilation error, however we can force type cast that bust it and cause underflow
	-> no runtime or compilation error in that case but it just try to convert it using overflow or underflow
- JVM allows even _ in between and bypass these _ chars by using Java 7 and higher
- by defaut int/int gives double -> however we cna type cast to int whihc just ignore decimcal places and od not roundoff
	-> for round off using Mat.roundoff funtcion or use floor or cieling
- floor will give minimum non doulbe value and ceil will give maximum next whole value
	2.2 floor will give 2 and ceil will give 3 , round will give 2 , round for 2.6 will give 3
- char is 2 byte meaning 16 bit and hence int can hold it without typecasting, but convert the char to ascii value
- int is default literal for whole number and double is default literal value for decimal numbers
- so even if we define a variable to some data type -> the value literal is always pointing to default one 
- double is default fractional data type and hence in float declaration we need to add f at the end on literal
- double can store more bigger values(64 bit) and also during division it stores more characters after ., meaning more presecision
- arithematic operations is faster as hardware level supported chips are build like that
- In integer and double literal we can add _ in between and compiler ignores them as they are added for readability
- BigDecimal is more precise and have a lot of supporting methods then float and double both
- char can store only single charachter and that can be number, special characther, alphabets anything and also it;s ascii value is different for case insenstivite chars
- char is 16 bit and can be easily hold up by int variable but it converts it char to its ascii value
- boolean size in bit is 1 bit as it can have 0 or 1 in memory -> true or false
- max size/width of a string is the max value of integer, String is 2 byte storage in java just like char
- + operator if used with one of the string then it always do concatenation at all level until () are used to do opeartions for other data type
- Teranry operator can replace if else condition but it always return a vlaue in both true and flase case and hence shall always be assigned to a variable for a result value
- + and - have same precendencce because even though we execute any operation result will be same same with division and multiplication

- Keywords are predifined words that have some meaning in a programming language , any of the keywords can not be an identifier . eg int int=23 will give error as int variable name is not possible
- any line in java wihtout data typeis expression , eg int la =23 -> la=23 is expression , if(kal == 22) kal ==23 is expression and so 
- Every line injava is a statment -> or a logical line as a lot of time we put enter and ame line ends in next line
	-> basically any code that starts and end till ; comes it is a single statment
- A white sapce is diferene bwtween keywors/identifiers  -> one or more space will mean asingle space by java compiler
- methods are created ro reduce duplication of code and make more reusable -> future cchanges will be done at one place
- overloading means createing a new method with same name but different method arguments/parameter - > all kind fo freedom for any method is given to this unlike overriding
- While creating we must ensure that there should not be amehtod in same class with same name and same argument paramters
		-> meaning just changing return type wont help in compiling if we have 2 methods with same name and same arguments

- method overloading is very useful for code readability and reusabiliy
	> we can remmeber one method name easily and based on different input arguments we can achive same functionality with idfferent inputs
-> eg of overloading is system.out.println -? same method name but input can be string, double, int etc -? easier to remmeber

-> switch case can be done only on ints, enums, strings -> can notbe used for objects -> overl all -> byte ,short ,char and int are part of ints(positive numbers)
	Stirng swithc is added in java 7 only earlier it was int and its small types and enum only 

-> in for loop if we do a break the increment stamtent will not get called, however if contiue is used the increment statetment will get called
-< in for loop on contine increment operator gets called automatically so that index goes to next, In while loop on contiue index do not get incremented we need to do it manually
	-> in while loop if we do not do amnual increment it will go to infinite loop

- > Integer.parseInt is better when we just need integer as it returns primitive type and Valueof method returns Integer object
	-> we cna save autounboxing


===========OOPS===================

Objects : A rela life entity, in java code from one aprt interact to other using object calls,	
	-> any real life thing also have a state and behvaiour same happens in java classes -> state -> instance vriables and methods act as behviour of object
- Class : Class is nothing but a template that helps us how the objects will be , any object form this class will take the things(behavious and state) using class template
- any local variable have to be initalized first before usage : int i; i+2; will give compilation erro  do like i=0; i+=2;
- instance variable gets defaul values as they are in object heap and not in stack(local variables)

Rules for constructors:
- if no constructor is added by dev a no arg onstructor with first line as super no arg cosntrucotr call is added by compliler
- if any constructor is added by dev compiler do not add default no arg constuctor
- if in our constructor fisr line is automatic super no arg constructor
	-> super or this constructor call shud be first line only in constructor
- if super class has no default constructor then while extending in child it causes compialtion error as it looks for no arg constructor
	-> either add no arg constructor in super or in child creat cusotmconstrucotr to call cusotm construcotr using super 
- everytime in any constructor call goes first to super -> super till object then it comes back to the stack
- any default value wadded in instance variable if overidden inconstructor will overrirde it

- in constructor it is advised not to call another set method or another method , instead if we want to set more than one better call another constructor using this
- this and super keywords can not be used in staic methods
- super. can be used to call methods super(...) can be used for ocnstructor call to ssuper class this(...) local class constructor 
- even abstract classes who we cna not instantiate at all still have constructors but interface do not have constructor
- all classes whihc are part of object heirachy have constructors
- we can not override static and final methods

Steps in identifying static / instance blocks and constructor flow:
- only once first the super class staitc blocks form top to down gets called then childs static blocks gets called form top to botton
- then the instance blocks of super class gets called from top to bottom
- then the super class cosntructor gets classed
- child instance bloks gets called from top to bottom
-child constructor gets called
->----------------- Meaning that the abosliute last place whihc overrides all the values of instance variable is at the constructor leve
	least preference is instance variable leve -> instance block leve -> construcotr level
- inheritance is for is a relationship and compoistion is for has a relationship

- Encapsulation :: As the name suggest it is like a capsule of different medicines
	-> In java encapsulation means capsualtion functionality and states meanins collecting instance variable and  methods in a sinle capsule
	this is done so that no one access or modify the instance variable directly , we can have restriction logic in methods
	-> create instance variable private and cretat poublic methods where we can have restriction logic for mutation(set method) and accessors(get methods)

- Abstraction: As the name suggest abstraction means a functionlauty which a user need not to bother how it si impolenmented 
	-> we just create a contract using abstract class or itnerface and us e a method to get out functionality done
	-> we need not to see how that method have implemented , so we should use interface/abstract class for reference and object can be child classes

- A good coding practise is that any cahnge in a class should not affect other classes that are using it
- encapsulation prevents this lets say our varible name is name currnetly and it is public and other calsses are accesing it directly
	-> if we want to cahnge the variable name other classes will get compialtion issue
	-> in encapsulation we create mutation method and we cna keep the mutation method same by changing property name
	-> this ensures change ina  single class do not affect other class
- benefits of encapsulation:
	a. it can save our data to get accidnetally corrupter , in mutation class we cna have restriction logic same with get method
	b. a change in this class wont affect other class , eg variable name change wont affect other as we an still keep set and get method as same
- mandatory instance variables are initialized in constructor -> basic purpose



- Arrays can not have negative size
- Arrays once initailized will have default values based on data type like int[] will have 0 , boolean as flase , object as null and so on

Wrapper classes
- introduced as generics do not support primitive types and hence collection api and other benefits of genrerics were not usable for primitive
- we could have created our own class with one of the instance variable as prinmitive type and that can be used for generics
- but this wrapping of class and proimitive type is time consuming and hdence jdk have created it for us
- All wrapper classes are immutbable like string and hence on modification a new object gets created, and another referenc emight still be poinitng to old object
- earlier days we need to manually box(create Wrapper class from primitive type)  and manually unbox(convert wrapper class to primitve)
- Also wrapper class adds a lof of functionlaity as part of methos in classes whicha  dev need not to write
- automatic wrapping is just time saving and still boxing and unboxing appens behind the scene

- Arraylit is nothing but dynamic array -> so each item index are next to previous one in meory
	-> hence arraylist is good use case when we want to read the iterations a lot of time , as next address i next to it
- In case of linkedlist -> each object can be in different memory location so iteration will be abit slower
	-> however insertions will be faster as no need tof increasing array size,
	also insertions in middle is O(1) and not o(n) as in arrylist it has to be shifted
- Also if we want to remove items present in arraylist we have to shift cells left ways a lot, if a lot of items is there it is not good
-> So use arrya lis when there are more number of reads and very less addition and removals
-> use linked list when there are fewer reads but more writes/removes

-> priority queue uses binary heaps to allow min adn max in o(1) time complexity , basically it will arrange items in sorted manner
-> linked list implements priorityqueue features as well
-> so if we want string, ojects to be kept in sorted manner we cna use prioerty queue impleentaionm -> or else wetrie custom code for linkedList impletmention
- > iterator can not add or remove items in the list , listiterator can help in addition and removing of items
-> listiterator also helps in iterating backwars on the fly if needed 

Interface
- An interface is nothing but a contract that the impl,enetor class will hve to folow, it forces methods signature , return types based on overriding rules
	-> in case we do not use interface contract and in frameworj if we change method arguments it will cause issue in client code which are integrating it usung jar embedded
	-> so in frameworks we need to enforce the contract in methods -> it can have covariant return but inpiut arguments must be exactly same and method name shud be excatly same
		-> it can add unchecked exception but can onlt throws defined exception or its subtype, we cna not restrict method in sgnature than the interface which is always public
- interface access modifier can only be public or default just like classes
- all mehtods in interface are by default abstract and public -> we cna not force to chnage it to private ,protected, default etc , also we cna not make it static
	-> as static and abstract can not go together -> static means implementation shud be there , but abstract means no method body
- interface is very usefult in api/ creations as the client code will not be visible to framework dev
	-> so any change in method will not give a bad smell to framework dev that it will cause issue in client code
- interface is a contractual obkigation and hence uses clinet dev and framework dev to stick toa  contract and hence a chnage in any place should not break the contract

- Inner classes : 
	-> A nested public class added inside another class is inner class
	-> inner class can even access private member variables and methods of main upper class
	-> however no one can create the object directly of inner class, first create outer class and then use instance variale of that to create inner class
	-> it is mostly uses in cases when the inner class can not exist wihtout the exisitng of main upper class
	-> both static and normal inner class can access private variables of amin upper class -> however statc nested calss can exist even without creating object of upper class
		-> also static nested class can exist indepenedntly and can have only static variables and methods -> 
		-< it can only access static method and variables from main upper class
	-> upper class can not accces inner class variables and methods until it creates its object
	-> the only class that can create inner class object without creating object of upper class is the upper class itslef

In inner class both upper and inner class can acces private instance variables and methods of each other
	-> but the upper class has to create object of inner class to acces private methods , but inner class can access without evne creating object of upper class
- private inner class means external clases wont be able to create object of innder class even after creating object of external class
Types:
a. inner classes
b. static nested classes
c. anonymous inner classes
d. block class -> degfine inside a method and will eb accesible only inside method

- The only place a class can be privavte is at inner class level only
- static inner class do not loads on startup , as jvm loads only main upper class on import/class load
	-> hence we cna create lazy loaded singleton using static inner class
anynoumous classes are classed without names similar to method local classes -< but method local class do have name even though scope of that class is till {} branckets only\

A varialble form method cna be used inside anaomymoius iner class but it needs to be effectively final
	-> meaning it should not be changed once defined either inside the anonymous class orin the method
	-> better make variables whihc are definiend insisd emhods and passed to anonymous clases as final manually

- Abstract class can have abstract as well as non bastract methods
- an abstract class cna hev 0 abstract methods , but even if one abstract method is there we need to have class as abstract.
- child class only needs to implement abstract methods but can override other methods
- constructo is allowed in abstract class
- also methods can be made private public, protected acces modifiers
- we can not isntantiate an abstract class , however an implementor calss can call the constructor of abstract class

----Generics------
- Collection fraework came before generics
- Collections used to hanbdle any kind of data type -> hetergeneous data type
-> however while fetching it could cause classcast exception
	-> they let raw type as part of backward capability  -> lot of code was written that way
- generics is there only for compiler force safety check -> actual data still stored in object , 

NAMING ONVENTION
-  Packages
- always shud be in lower case -> never use camel case
- writ the reverse of domain url
- if it contains - replace with _ same _ can be used to repolace conflicts like switch is also keyword so we cna com.learing._switch 
for Switch.learning.com -> com.learning._switch -> all small caps , revers ,and use _ for any conflict
 
- packages are used for segrregating classes and keeping in related directories 
- same class name can be present in different package but smae clas sname can not be used for a enw class in same package.
- once a packge class is imported no need to type the fully qualified name again unitl we need to use another class with same name but in different package

- class can either be public or default
- public is all te cpage acces ,default is access of class is till package only

class can be final -> can not be extended
- private methods can be used only in same file
- default methods can have access only in same paclkage -> either using extends or object creation
- protected methods : default within package , but outside package can be accesed only extending, but once extended in other packae for third class it becomes private

- final methods can be inherited but can not be overrideen , same with satatic method,
	difference is static instance variale/methods will have one copy , however final instance variables/methods can have seperate copy for each object created of class
- however in case of static method comipler do not give exection on forcefully overriding, it actually makes a new copy
->	polymorphism wont work here
-> meaning if reference instancs eis super but we are calling constructor of child
	-? then it will always call static method of super class
	-> if reference variable type is chaild then it calls tatic method of child
- final methods can be inherited but can not be overriden -> compiler gives error , in static method we can redefine the method in child class with no compilation errro
	-> if reference variable type is child class then static method of child will get caled, 
	-> in case reference variable type is super class then static method of super class is called
- anoymous inner classes can define new methods but that will be of no usage, as the methods we can call will only be mentioned in instance variable calss
-> in anoymous class we can not create a new class and hence we wont be able to clal this method
- vatiables used in lambda/anoymous class has to eb final or effectively final
	> can not modify it inside the anonymous class not can modify after assgining the variable

- final instance variable have to initized at vairable level or on constructor level or init block level
	-> if we defined at vaiable level then it gives issue at other 2 level, 
	-> if we instantiate at init block level it gives compilation error at constructoir level
general sequence , first default value at instance variable level -> gets overrdien at init block level , then constructor level can be overriden
	-> once instantiated at any level in other level if we again reassign vlaue it gives compilation error

Collection interface is the base of interfaces like Set, List, Queue , each can be converted to anotherm however map is not part of this heirachy
	-> Beneift of using collection interface instance variable type is in future we cna choose set or arraylist or convert one type to other without any change in code

- Binary search is applicatble in Collections for list interface only, similar to Arrays implementaion -> O(log n)
- > however we need to sort the array or list first
-> thats why we need to pass comparator or implemetnas comparable in element class of collection

- Copy constructor of collection classes do shallow copy only
	-> meaning if we create new list copying from existing list, indivual elements will point to same object
	->so if we modify any index object it will relfect in both the arrayliust, however new additoin of object wont reflect in other collection/list
- Even if we use stream and directly collect to list -> shallo copy
- for deep copy we shud use manual new cponstrucotr call one by one in for loop o r use map method of stream to call new constructor

- Static block usage can be useful in initializing stafic final variable -> as it will be needed ot initlizae only once
	-> lets say we have a list of string -> we can use arrays.aslist and in one line we can have static variable defined and initilzaed
	-> but what about map
	-> static variables are to be defined only once and we can not keep it in constructor

Map -> map interface to store key value pairs
HAshmap -> implmenetation of map , uses hashing for performance insertion and fetching and removal can happen in O(1) time complexity or worsee in case of collition -> o(n)
	-> since it is hasedmap the insertion order wont be maintained while reading the entryset/keyset, as hased items are sotred in array based on hash key generated
	-> put method overrides old value with new value when key equals, also it retruns old value

- retunrin during constructor is bas -> as it actually return back object but part of code after return is not added
	-> so if we want to block obkject creation we shud throw expection
-> in method we have abiolity to retun null in bad if condition

Set
- No duplicated allowed
- no way to acces specific index , as most of the time the insertion order is not maintained(in hashset)


- hashset uses hashmap -> hashmap uses hasing technique to have node array , each item gets converte dto ahshcode and modulus of size then that wlement is kept in that index of araay
	-> in hashset we create some random value and key as the actual element vlaue
- hashcode has to return equal if equals is returning true , in equals mehotd we override and hence input has tobe object instance
	-> we can check instance of operator if subclasses can be comared, other wise use obj.getClass == this.getClass() -> super class can coamre to suepr class only
- In hashmap if duplciate key obj is passed it overrides however in hashset it bypass the second object
- if equals is returning true hashcode has to return true and hence we override both methods together
- in set if we have anaother object have is equsl to existing object it bypasses
- in map if existing key equals new key -> it do not modify the key object(there could be some proeprties that are not used in equals method wont show up)
		-> just override the value
- While allowing hashcode and equals method in case of subclasses ,make override and hashcode methods as finla, otherwise a bad overriding code in child class can cause symetric rule to fail
	father.equals(child) will return true but child.equals(father) returns false, hence either make methods as final
	or instead conside them differnet object liusing getclass== other.getClass() 

unmodifiablemap/collection returns a map where we can call only read only methods , write method give exception
	however once we get a single element from iteration we can still mpodify it , we can make that immutable based on need


=====Exceptions============
- Any exception senario can be hanled in 2 ways
	a. have if condition to check and block that condition to occur -> eg dividing by 0, if(y == 0) return 0
	b. let the code flow and keep inside try cartch block, flow goes to catch and return 0 from there

File operations:
Charachter streams -> 
	a. file reader , filewrier  -> can take file or string file path, read/write characther by charachter one by one
	b. bufferede read, buffered writer , can use buffer so taht less times read and write happens to file
			-> need filereader/filewriter object to wrape, automatically the close method of inner reader gets called even on just calling close method of buffered reader/writer
	
Bytestream -> as the name suggest it do not store files with texts, like above ones,
	-> it uses binary data to store in file and read from it
	-> serialization uses this, which can store instance state in file using fileinputstreamreader and writer
	
	->this is used in case when we want to read write to a file whihc is not human readable, it stores data in file in binary format ,
	once user try to see this file it wont be able to understand it, however this ca be read in code
	Coding is simlar to carachter stream read/write

- A class need ot implement serialzible interface to get serialzed
- an instance variable of another class also need to be serilzable otheriwse it will give exception
- if we do not have acces to instnacne variable class than we have to make it transient so that it gets skipped during serialzition

- So if a class have instance variable of another class that is not serializble , so we make it tranisent to let the actual object serialize and on deserailziation we gets null

Random access file
while using filereader.filewriter , if we want to read specific lines or write at specific line we need to start from first line nutil that line sequentially
	-> this reduces the performance
- Java provide random access file whih can be only used if the size of charachters of each line is same
	-> we can directly jump to the line in O(1) complexity using formula -> lineNumber * size of each line -> we need to add chars each line +2 (for \n) for new line
	-> \n is implicit and it is added byt jvm internally for file next line
	-> we can directly tell the randomaccess file api to provide data for the byte size -> n *(charssize+2), for first line it shud be 0

==================Java NIO=================
NIO also stands for non blocking io or new io,
- Introdued in 1.4 ersion as part of performance imporivmenet,
- Normal i/o using file anbd filereader/filewriter/bufferedereader/bufferedwirter are blocking in nature
	meaning if a thread is assinged to do a task for file writing/reading, it will go to blocked state until the operation is going and basically it will not do anything till the task is completed,
	NIO adds feature to the task by making it nonbllkcing and can handle multiple tasks paralely
- but it intrdoces some complexity, however we can ocnvert normal io to nio and vice versa

Old i/o supports thread cloking functionaliteis foir -> filereader/writer, printwriter, bufferereader/wirter, -> these are for charachter stream data transfer
	b. byte stream transer -> data whihc wont be easily understood by hyman , like butes of code , better for perforamnce
	like dataoutputstream, datainputstream , serailziation also uses same concept but instead of saving indivdual properties seperately,	
			in serialization we can save all the sate of whole object(skips transietn and all the instance variale shall be serailzable)
	-> if instance variable are not accesboile we can make it transiet to block default serialziation
	-> and override readObject and writeObject private clalback methods to first call oob method and then do wrtieutf,readutf methods of byte streams
	-> we can take value from currnet instance and on read we cna creat enew instance and assing to main object
NIO base data stream uses blocks of data instead of charachter by charachter or buffer of charachters
	-> this enhances performance and also allo multipl different type of data throoug different data soruce
-< nio uses channels just like spring cloud stream
-> meaning we connect toa data source thorugh one channel and different data type of ocntnent can be handled in same blocks , and hence as compared to buffer (holding same data type)
	we can even further increase size of blocks and hence very less time a task will be done in file operations
	-> also a channel is non blcking since it can handle multipl different data types and hence for same data soruce from differnetn lpocation nio cna handle same theread
	meaning thread do not have to go to sus[pended stat when task is going on, in normal io thread used to wait until operation is going on

- Blocking means , thread will wait until read/write operation is fully done and wont do anything till then
- non blocking means -> same thread will reamin available as part of channel(cna handle different data type)
			-> client code iwll jsut provide the chanel with request and fire and forget, chanel store in queue and pass it to main thread to read/write operation
		smae concept is usined in spring lcoud stream
- Also trhead in non bllkcingio is always open and keep on picking things from queue, and provide data whatever is read till that moment
	_ nio can be used to create channel connected to dataposurce like D.B , netwrok api, Files anything
	- similar to reactive programming

Problems with File io becuase o which nio came:
a. Methods present in instance of File class have boolan return types adn do not throw the xception -> so finding real cause of failture was not an option
	eg: we delete and it retuned flase , we do not know if file do not exist or we do not have permissions
	for this jio introduces exists and doesnotexist methods -> if first return true it exist , if second returns true it do not exixts
	/ in case boht returns false means we do not have permission to access file
b. slowness while listing the directoroies/ sub directories recursively
c. we cna not use file\\ protocl to connect to external files
d. ineefficent metadata like file owner , file last modoified time, creation time , also do not support the step to modify the properties like creation time

We can iterate one directory using directorystream<Path> we can use filters/globs to see only limited kind of items
- however this can help us iterate only one level of directory and files, inner directory are not iterated.
- We can use walfileTree method of files to iterate to nth level of subdirectories using depth first search of tree

============Concurrency============
- Process: A process is where any applicaton runs, on os leve we can see it, it can have multiple threads
	a thread is a single executable unit of task, there can be many threads present on a single process
- Each process has its own memory heap from RAM and one process can not access heap memory of another process
- however threads runnig on same process can access heap mepry of proces which si sahred among all threads wihting the process.
- thread also have local stack memory, whihc is not shared by another thread, however threads can have common memory in anme of heap of process
- We cna not start the thread object twice , illegal thread state exception will occur

- local variables in the thread are there on thread stack and hence each have its own copy,
	if one object is passed to multiple threads then they share the same object
	-> so race condition will happen , and change done by one will get rejected by other

- synchronized keyword on method level will lock the object gloablly,
	,meaning if one thread is locked and executing one synch method other thread wanted to execute other synchronized method will still wait until other method lock is over
	thats why we shud have seperate lock , and using lock object we can lock and unclock part of methods
- constructors can not have synchorizned as they are synchroizned on its own
- we shud synchroze the block only which is modifying the heap data, local stack data of thread is hidden to toher threads ,
	so we shud use synch block or reentrant lock to lock this for the part of code whic have modification in shared object only(heap is shared accress threads)

- Synchronized lock object alwasy has to be on instance level and not local variable leve, as each stack has its own copy and hence it wont work

- A thread can not be suspended while executing atomic operatins like a=b, a=23; however a =new A() is not atomic operations so currnet thread may susepnd and another thread can take over

Problems with synchronization:
a. locks can not start in one method and end in another, because of {}
b. locks cna not be set with timeout
c. once lock is not obtained it wait indefinitely until lock is aquired , we can not interrupt the deadlocked thread.
d. synchronzie do not enforce first blocked thread to aquire lock the first, as JVM has its own mechanism 
	if mayb epoossible the thread waites the lease gets the lock with synch blocks

- Only advantage of synchronized block is that if block is  present in while loop and we do continue unlock is explicit(at the end of synchnozed curly branck ends)
	-> however in case of renetrant lock we need to unlock during break or continuew manually, or do it using try finally
- if we call unlock method in a renetrant lock that actually do not ahve aquired lock will trhow runtime exception
- Executor service helps us to forget about thread life cycle and based on thread pool execute some task, or return some task paralely
	-> based on thead pool it can manage life cycle of threads
- concurrenmt modication error happens when a collection is not a synchroznied on and one thread has already locked reading/writing and another thread want to do write/read at the same time
	-> basically when a thread has locked to modify other one tries to read or wirte it gives this exception
- array blcking queu is synched and hence we do not have to handle synching before adding , removing,modifying the item

2 ways of deadlock
a. thread one lock1 and thread 2 locks 2 and thread 1 waiting for lock2 and thread2 waiting for lock 1, corcular deadlock
b. one synchrnized method calling another syncrhozniaed method of same class
	basically one method claling another synch method locked on same object
	since first method is not omplete, it can not execute second method and since second method is nto compelte method 1 is not complete and hence lock is blocked
Thread starvation is condition when a least prioritized thread who is waiting nevenr get to aquire lock and ececute its task
- setting priority in synchronized block do noth help as jvm do not support fairness,we can use reentrant lock fairness version of constructor but it causes performance

- Thread can not go to supsend state while it is running an atomic operation like a=23, a=b , however a ="23" strinct literal is  not atomic
	so if method is not synched and two threads call simultaneouos there can be slipped condition and datainconsistency
- Volatile : Each thread uses local cache for all variable values for performanc eimpact,
	so if one thread is running on one processor and another thread on another processor than its possible that thread  1 might increment to 2 , but value wont be visible to other thread
	if we make variable volatile it do not caches it in thread level and directly read write to main memory 
- we still need to synch thse kind of variables
- If the common heap modification process is atomic then thread wont suspend and at same time another thread wont modify the heap memory
	hence we do not need synch block for atomic process
- Integers like atomicinteger make increment and decrement as atomic and hence we do not need synch bolck for these steps
- java iterator object from collection can be used only once, once completely iterated we need to createa a new iterator as hasnext from the same iterator object will give false

- lambdas do not apply for abstract class with single abstract method, 
- Lambdaas are btter than annymous class
	-> anonymouc class gets ompiled to a sperate .class file meaning 2 class will get created one for main class and one of anononymous class
eg of anonymous class name: basics.HOwManyObjects$1
	-> lambas are like curly brakets within method , all outside variables are effectively final meaning once insiazied can not cahnge if using under lambas
	, It is because lambdas are lazy and do not eavaluate sequentially and hence it is better to make it final
- lambdas can only be used for interfaces whose only one method needs to be impl,ented in class, if something is present in object class than thar time also it can be finctoipnal
eg: comparator , compare to and equals both are abstract method but equals have feature in object class and hence it is functional interface